#!/usr/bin/env python3
"""
do something
"""
import argparse
import os
import sys
import re
import logging
import configparser
import json
bin = os.path.abspath(os.path.dirname(__file__))
__author__='Ren Xue'
__mail__= 'xueren@genome.cn'
__date__= '2021年09月07日 星期二 16时16分33秒'

class myconf(configparser.ConfigParser):
	def __init__(self,defaults=None):
		configparser.ConfigParser.__init__(self,defaults=None,allow_no_value=True)
	def optionxform(self, optionstr):
		return optionstr

def read_config(file,shell):
	config = myconf()
	template={}
	try:
		config.read(file)
	except:
		sys.stdout.write("config is not standard, maybe a json\n")
		return template
	if config.has_section("template"):
		for key, val in config.items("template"):
			new="$({0})".format(key)
			template[new] = val
	if config.has_section("shell"):
		for key, val in config.items("shell"):
			new="~{"+key+"}"
			shell[new] = val
	return template


def read_json(file):
	##读取json
	config={}
	with open(file,'r') as load_f:
		try:
			config = json.load(load_f)
		except:
			sys.stdout.write("config is not json,maybe a standard config \n")
	return config


def main():
	parser=argparse.ArgumentParser(description=__doc__,formatter_class=argparse.RawDescriptionHelpFormatter,epilog='author:\t{0}\nmail:\t{1}\ndate:\t{2}\n'.format(__author__,__mail__,__date__))
	parser.add_argument('-o','--outfile',help='report.sh',dest='out',type=str,required=True)
	parser.add_argument('-i','--indir',help='indir',dest='indir',type=str,required=True)
	parser.add_argument('-c','--config',help='config',dest='config',type=str,default="no")
	parser.add_argument('-w','--workid',help='workid',dest='workid',type=str,required=True)
	parser.add_argument('-s','--shell',help='shell',dest='shell',type=str,required=True)
	parser.add_argument('-t','--title',help='title',dest='title',type=str,required=True)
	parser.add_argument('-b','--bin',help='bin',dest='bin',type=str,required=True)
	args=parser.parse_args()
	##
	shell={}
	shell["~{BIN}"]=os.path.abspath(args.bin)
	shell["~{bin}"]=os.path.abspath(args.bin)
	shell["~{report_name}"]=args.title
	shell["~{reportdir}"]=os.path.abspath(args.indir)
	shell["~{workid}"]=args.workid
	
	print("###replace begin ")
	os.system("cat {0}>{1}".format(args.shell,args.out))
	for j in shell:
		cmd="sed -i 's#{0}#{1}#g' {2}".format(j,shell[j],args.out)
		os.system(cmd)

	if os.path.isfile(args.config):
		template = read_config(args.config,shell)
		template_new = read_json(args.config)

		if template:
			for i in template:
				os.system("sed -i 's#{0}#{1}#g' {2}/template.md ".format(i,template[i],args.indir))
		if template_new:
			for j in template_new:
				os.system("sed -i 's#$({0})#{1}#g' {2}/template.md ".format(j,template_new[j],args.indir))
	print("### replace end ")






if __name__=="__main__":
	main()
